networks:
  {containers_prefix}network:
    driver: bridge
    name: {containers_prefix}default
    ipam:
      config:
        - subnet: 172.{network_octet}.0.0/16  # Dynamic subnet based on namespace

services:
  redis_db:
    image: 'redis:alpine'
    container_name: '{containers_prefix}redis_db'
    command: redis-server
    volumes:
      - ./data/redis-data:/data
    networks:
      - {containers_prefix}network

  backend:
    image: ghcr.io/aurora-is-near/blockscout:latest
    container_name: '{containers_prefix}backend'
    deploy:
      resources:
        limits:
          cpus: "{cpu_limit}"
    pull_policy: always
    restart: always
    stop_grace_period: 5m
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - ./data/logs/:/app/logs/
    depends_on:
      - redis_db
      - db_ro_user_setup
      {depends_on_db}
    command: sh -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    env_file:
      - config/common-blockscout.env
      - config/blockscout.env
      - config/sidecar-injected.env
    networks:
      {containers_prefix}network:
        ipv4_address: 172.{network_octet}.0.12

  visualizer:
    image: ghcr.io/blockscout/visualizer:${VISUALIZER_DOCKER_TAG:-latest}
    container_name: '{containers_prefix}visualizer'
    pull_policy: always
    platform: linux/amd64
    restart: always
    env_file:
      -  config/common-visualizer.env
    networks:
      - {containers_prefix}network

  sig-provider:
    image: ghcr.io/blockscout/sig-provider:${SIG_PROVIDER_DOCKER_TAG:-latest}
    container_name: '{containers_prefix}sig-provider'
    pull_policy: always
    platform: linux/amd64
    restart: always
    networks:
      - {containers_prefix}network

  frontend:
    image: ghcr.io/aurora-is-near/blockscout-frontend:latest
    container_name: '{containers_prefix}frontend'
    pull_policy: always
    platform: linux/amd64
    restart: always
    env_file:
      - config/common-frontend.env
      - config/frontend.env
      - config/sidecar-injected.env
    depends_on:
      - 'backend'
    networks:
      {containers_prefix}network:
        ipv4_address: 172.{network_octet}.0.10

  stats:
    image: ghcr.io/blockscout/stats:${STATS_DOCKER_TAG:-latest}
    container_name: '{containers_prefix}stats'
    pull_policy: always
    platform: linux/amd64
    restart: always
    depends_on:
      - backend
      {depends_on_db}
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    env_file:
      - config/common-stats.env
      - config/stats.env
      - config/sidecar-injected.env
    networks:
      {containers_prefix}network:
        ipv4_address: 172.{network_octet}.0.13

  proxy:
    image: nginx
    container_name: '{containers_prefix}proxy'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - "${host_proxy_path}:/etc/nginx/templates"
    restart: always
    environment:
      CONTAINERS_PREFIX: {containers_prefix}
      BACK_PROXY_PASS: ${BACK_PROXY_PASS:-http://172.{network_octet}.0.12:4000}
      FRONT_PROXY_PASS: ${FRONT_PROXY_PASS:-http://172.{network_octet}.0.10:3000}
    env_file:
      - config/sidecar-injected.env
    ports:
      - "{blockscout_port}:80"
      - "{stats_service_port}:8080"
      - "{visualizer_service_port}:8081"
      {smart_contract_verifier_port_mapping}
    depends_on:
      - backend
      - frontend
      - stats
    networks:
      {containers_prefix}network:
        ipv4_address: 172.{network_octet}.0.11

  db_ro_user_setup:
    image: postgres:17
    container_name: '{containers_prefix}db-setup'
    restart: "no"
    environment:
      - DATABASE_URL={database_url}
      - DATABASE_NAME={database_name}
      - POSTGRES_RO_PASSWORD={postgres_ro_password}
    volumes:
      - ./config/init_ro_user.sh:/docker-entrypoint.sh
    entrypoint: ["sh", "/docker-entrypoint.sh"]
    networks:
      - {containers_prefix}network
    depends_on: {depends_on_db_list}
    labels:
      com.docker.compose.ephemeral: "true"
