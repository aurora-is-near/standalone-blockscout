networks:
  {containers_prefix}network:
    driver: bridge
    name: {containers_prefix}default
    ipam:
      driver: default
      config:
        - subnet: 172.{network_octet}.0.0/16
          gateway: 172.{network_octet}.0.1

services:
  redis_db:
    image: 'redis:alpine'
    container_name: '{containers_prefix}redis_db'
    command: redis-server
    volumes:
      - ./data/redis-data:/data
    networks:
      {containers_prefix}network: {}

  backend:
    image: ghcr.io/aurora-is-near/blockscout:latest
    container_name: '{containers_prefix}backend'
    deploy:
      resources:
        limits:
          cpus: "{cpu_limit}"
    pull_policy: always
    restart: always
    stop_grace_period: 5m
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    env_file:
      -  config/common-blockscout.env
    volumes:
      - ./data/logs/:/app/logs/
    depends_on:
      - redis_db
      - db_ro_user_setup
      {depends_on_db}
    command: sh -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    environment:
      DATABASE_URL: {database_url}
      COIN: "{currency_symbol}"
      HIDE_UNCLES: "true"
      HIDE_BLOCK_MINER: "true"
      DISPLAY_TOKEN_ICONS: "true"
      INDEXER_MEMORY_LIMIT: 30
      RE_CAPTCHA_DISABLED: "true"
      DISABLE_WEBAPP: "false"
      INDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER: "true"
      INDEXER_CATCHUP_BLOCKS_BATCH_SIZE: 90
      INDEXER_RECEIPTS_BATCH_SIZE: 90
      INDEXER_COIN_BALANCES_BATCH_SIZE: 10
      INDEXER_INTERNAL_TRANSACTIONS_TRACER_TYPE: "call_tracer"
      ETHEREUM_JSONRPC_HTTP_URL: "{rpc_http_protocol}://{rpc_url}"
      JSON_RPC: "{rpc_http_protocol}://{rpc_url}"
      ETHEREUM_JSONRPC_WS_URL: "{rpc_ws_protocol}://{rpc_url}"
      ETHEREUM_JSONRPC_TRACE_URL: "{rpc_http_protocol}://{rpc_url}"
      SUPPORTED_CHAINS: '[{ "title": "Mainnet", "url": "https://{explorer_url}" }]'
      BLOCKSCOUT_HOST: "{explorer_url}"
      CHAIN_ID: {chain_id}
      SECRET_KEY_BASE: {secret_key_base}
      FIRST_BLOCK: "{genesis}"
      TRACE_FIRST_BLOCK: "{genesis}"
      MICROSERVICE_SC_VERIFIER_URL: "{verifier_url}"
      MICROSERVICE_SC_VERIFIER_TYPE: "{verifier_type}"
      SOURCIFY_INTEGRATION_ENABLED: "true"
    networks:
      {containers_prefix}network:
        ipv4_address: 172.{network_octet}.0.12

  visualizer:
    image: ghcr.io/blockscout/visualizer:${VISUALIZER_DOCKER_TAG:-latest}
    container_name: '{containers_prefix}visualizer'
    pull_policy: always
    platform: linux/amd64
    restart: always
    env_file:
      -  config/common-visualizer.env
    networks:
      {containers_prefix}network: {}

  sig-provider:
    image: ghcr.io/blockscout/sig-provider:${SIG_PROVIDER_DOCKER_TAG:-latest}
    container_name: '{containers_prefix}sig-provider'
    pull_policy: always
    platform: linux/amd64
    restart: always
    networks:
      {containers_prefix}network: {}

  frontend:
    image: ghcr.io/aurora-is-near/blockscout-frontend:latest
    container_name: '{containers_prefix}frontend'
    pull_policy: always
    platform: linux/amd64
    restart: always
    env_file:
      -  config/common-frontend.env
    depends_on:
      - 'backend'
    environment:
      NEXT_PUBLIC_IS_TESTNET: "{is_testnet}"
      NEXT_PUBLIC_API_HOST: {explorer_url}
      NEXT_PUBLIC_STATS_API_HOST: "{blockscout_http_protocol}://{stats_api_host}"
      NEXT_PUBLIC_NETWORK_NAME: {name}
      NEXT_PUBLIC_NETWORK_SHORT_NAME: {name}
      NEXT_PUBLIC_NETWORK_ID: {chain_id}
      NEXT_PUBLIC_APP_HOST: {explorer_url}
      NEXT_PUBLIC_VISUALIZE_API_HOST: "{blockscout_http_protocol}://{visualizer_api_host}"
      NEXT_PUBLIC_AD_BANNER_PROVIDER: none
      NEXT_PUBLIC_AD_TEXT_PROVIDER: none
      NEXT_PUBLIC_NETWORK_VERIFICATION_TYPE: validation
      NEXT_PUBLIC_NEAR_NETWORK: {network}
      NEXT_PUBLIC_NETWORK_RPC_URL: "{rpc_http_protocol}://{rpc_url}"
      FAVICON_GENERATOR_API_KEY: {favicon_generator_api_key}
      NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID: {wallet_connect_project_id}
      NEXT_PUBLIC_API_PROTOCOL: {blockscout_http_protocol}
      NEXT_PUBLIC_API_WEBSOCKET_PROTOCOL: {blockscout_ws_protocol}
      NEXT_PUBLIC_NETWORK_CURRENCY_SYMBOL: {currency_symbol}
      NEXT_PUBLIC_NETWORK_LOGO: {network_logo}
      NEXT_PUBLIC_NETWORK_LOGO_DARK: {network_logo_dark}
      NEXT_PUBLIC_NETWORK_ICON: {network_icon}
      NEXT_PUBLIC_FEATURED_NETWORKS: https://raw.githubusercontent.com/aurora-is-near/blockscout-frontend/main/public/static/featured_networks/aurora.json
      NEXT_PUBLIC_HOMEPAGE_CHARTS: '[]'
    networks:
      {containers_prefix}network:
        ipv4_address: 172.{network_octet}.0.10

  stats:
    image: ghcr.io/blockscout/stats:${STATS_DOCKER_TAG:-latest}
    container_name: '{containers_prefix}stats'
    pull_policy: always
    platform: linux/amd64
    restart: always
    depends_on:
      - backend
      {depends_on_db}
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    env_file:
      -  config/common-stats.env
    environment:
      STATS__DB_URL: {database_url}-stats
      STATS__BLOCKSCOUT_DB_URL: {database_url}
      STATS__CREATE_DATABASE: true
      STATS__RUN_MIGRATIONS: true
      STATS__BLOCKSCOUT_API_URL: http://172.{network_octet}.0.12:4000
      STATS_CHARTS__TEMPLATE_VALUES__NATIVE_COIN_SYMBOL: {currency_symbol}
    networks:
      {containers_prefix}network:
        ipv4_address: 172.{network_octet}.0.13

  proxy:
    image: nginx
    container_name: '{containers_prefix}proxy'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - "./data/proxy:/etc/nginx/templates"
    restart: always
    environment:
      BACK_PROXY_PASS: ${BACK_PROXY_PASS:-http://172.{network_octet}.0.12:4000}
      FRONT_PROXY_PASS: ${FRONT_PROXY_PASS:-http://172.{network_octet}.0.10:3000}
    ports:
      - "{blockscout_port}:80"
      - "{stats_service_port}:8080"
      - "{visualizer_service_port}:8081"
      {smart_contract_verifier_port_mapping}
    depends_on:
      - backend
      - frontend
      - stats
    networks:
      {containers_prefix}network:
        ipv4_address: 172.{network_octet}.0.11

  db_ro_user_setup:
    image: postgres:15
    container_name: '{containers_prefix}db-setup'
    restart: "no"
    environment:
      - DATABASE_URL={database_url}
      - DATABASE_NAME={database_name}
      - POSTGRES_RO_PASSWORD={postgres_ro_password}
    volumes:
      - ./config/init_ro_user.sh:/docker-entrypoint.sh
    entrypoint: ["sh", "/docker-entrypoint.sh"]
    networks:
      {containers_prefix}network: {}
    depends_on: {depends_on_db_list}
    labels:
      com.docker.compose.ephemeral: "true"
